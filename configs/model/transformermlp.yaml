_target_: masif.models.transformerMLP.masifTransformerMLP

# fixme: dataset_metaf_encoder.hidden_dims[-1] should be a variable that can be utilized in decoder.hidden_dims[0]

n_algos: ${dynamically_computed.n_algos}
n_fidelities: ${dynamically_computed.n_fidelities}

decoder_hidden_dims: [ 100 ] # this is only intermediate layers
dataset_metaf_encoder:
  _target_: masif.utils.mlp.MLP
  hidden_dims:
    - ${dynamically_computed.n_data_meta_features}
    - 100  # arbitrary value

positional_encoder:
  _target_: masif.utils.positionalencoder.PositionalEncoder
  d_model: ${dynamically_computed.n_fidelities}
  max_len: 1000 # ${dynamically_computed.n_fidelities}
  dropout: 0.1

transformer_lc:
  _target_: torch.nn.TransformerEncoder
  num_layers: 2 # how many transformer layers to stack
  encoder_layer:
    _target_: torch.nn.TransformerEncoderLayer
    d_model: 1  # batch trick: look at every curve one at a time to allow appropriate masking
    nhead: 1 # attention heads  d_model / nhead = 1 must be devisible
    dim_feedforward: 100
    dropout: 0.1
    activation: relu

    batch_first: True
    norm_first: False
    device: ${device}

  norm:
    _target_: torch.nn.LayerNorm
    normalized_shape: ${model.transformer_lc.encoder_layer.d_model}
#
#decoder:
#  _target_: masif.utils.mlp.MLP
#  hidden_dims:
#    - ${add:100, 2600} # metaf encoding dim + (n_fidelities +1) * n_algos # + 1 because of nan-safeguard
#    #    - ${model.joint_dim} # n_d_metaf_encoding_dim + transformer output dim
#    - ${dynamically_computed.n_algos}

device: ${device}